let mutable="I can change";const immutable="I cannot change";const add=(a,b)=>a+b;console.log(add(5,3));const name="Alice";console.log(`Hello, ${name}!`);const person={name:"John",age:30};const{name:firstName,age:age}=person;console.log(firstName,age);const greet=(name="Guest")=>`Hello, ${name}!`;console.log(greet());const arr1=[1,2,3];const arr2=[...arr1,4,5];console.log(arr2);const sum=(...numbers)=>numbers.reduce(((acc,val)=>acc+val),0);console.log(sum(1,2,3));const fetchData=()=>new Promise((resolve=>setTimeout((()=>resolve("Data fetched")),1e3)));fetchData().then(console.log);class Person{constructor(name){this.name=name}greet(){console.log(`Hello, I'm ${this.name}`)}}const p=new Person("Bob");p.greet();console.log([1,2,3].includes(2));console.log(2**3);const fetchDataAsync=async()=>"Hello";fetchDataAsync().then(console.log);const obj={a:1,b:2};console.log(Object.entries(obj));console.log(Object.values(obj));const obj1={a:1,b:2};const obj2={...obj1,c:3};console.log(obj2);fetchData().then(console.log).finally((()=>console.log("Cleanup done")));const nestedArr=[1,[2,[3,4]]];console.log(nestedArr.flat(2));try{throw new Error("Oops!")}catch{console.log("Error handled!")}const user={};console.log(user?.profile?.name);console.log(null??"Default");console.log(0??"Default");const budget=1e6;console.log(budget);console.log("hello hello".replaceAll("hello","hi"));const arr=[10,20,30];console.log(arr.at(-1));